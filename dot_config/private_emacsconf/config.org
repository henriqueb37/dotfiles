#+title: My GNU Emacs Config
#+author: Jos√© Henrique Brito Oliveira
#+description: My personal desktop Emacs config
#+options: toc:2

* TABLE OF CONTENTS :toc:
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#things-to-install][THINGS TO INSTALL]]
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindigs][General keybindigs]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#buffer-move][BUFFER-MOVE]]
- [[#centered-text][CENTERED TEXT]]
- [[#chezmoi][CHEZMOI]]
- [[#company][COMPANY]]
- [[#dashboard-splash-screen][DASHBOARD (SPLASH SCREEN)]]
- [[#diminish][DIMINISH]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#helpful][HELPFUL]]
- [[#hyperbole][HYPERBOLE]]
- [[#language-support-lsp][LANGUAGE SUPPORT (LSP)]]
  - [[#typescript][Typescript]]
- [[#magit][MAGIT]]
- [[#modeline][MODELINE]]
- [[#vertico-and-consult][VERTICO (AND CONSULT)]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#eye-candy][Eye Candy]]
  - [[#fix-indentation-annoyances][Fix indentation annoyances]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#org-queries][Org queries]]
  - [[#org-roam][Org Roam]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#smart-parens][SMART PARENS]]
- [[#snippets][SNIPPETS]]
- [[#sudo-edit][SUDO EDIT]]
- [[#theme][THEME]]
- [[#which-key][WHICH-KEY]]

* ABOUT THIS CONFIG
A lot of the code in this config is from [[https://github.com/doomemacs/doomemacs][Doom Emacs]] and the overall structure is taken from [[https://gitlab.com/dwt1/configuring-emacs][DistroTube's Configuring Emacs series]]. This basically takes some of the Doom Emacs features in a more stripped down version, trying to be a bit more lightweight.

* TODO THINGS TO INSTALL
- [ ] evil-args
- [ ] evil-collection
- [ ] evil-easymotion
- [X] evil-embrace
- [X] evil-escape
- [ ] evil-indent-plus
- [ ] evil-lion
- [X] evil-nerd-commentary
- [ ] evil-numbers
- [ ] evil-quick-diff
- [X] evil-surround
- [ ] evil-textobj-anyblock
- [ ] evil-vimish-fold
- [ ] evil-visualstar
- [ ] exato

* IMPORTANT PROGRAMS TO LOAD FIRST
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
			:ref nil
			:files (:defaults (:exclude "extensions"))
			:build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
 (build (expand-file-name "elpaca/" elpaca-builds-directory))
 (order (cdr elpaca-order))
 (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
	   ((zerop (call-process "git" nil buffer t "clone"
				 (plist-get order :repo) repo)))
	   ((zerop (call-process "git" nil buffer t "checkout"
				 (or (plist-get order :ref) "--"))))
	   (emacs (concat invocation-directory invocation-name))
	   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
				 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
	   ((require 'elpaca))
	   ((elpaca-generate-autoloads "elpaca" repo)))
      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
    (error "%s" (with-current-buffer buffer (buffer-string))))
((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

(use-package emacs
  :elpaca nil
  :config
  (setq custom-file (expand-file-name "customfile.el" user-emacs-directory))
  (setq ring-bell-function #'ignore)
  (setq-default scroll-margin 7
                scroll-step 1
                scroll-conservatively 9999)
  (pixel-scroll-precision-mode 1)
  (recentf-mode 1))
#+end_src

** Load Evil Mode
#+begin_src emacs-lisp
(use-package undo-fu)

(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-split-window-below t
        evil-vsplit-window-right t
        evil-undo-system 'undo-fu)
  (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))

(use-package embrace)

(use-package evil-embrace
  :after (evil-surround embrace)
  :config
  (evil-embrace-enable-evil-surround-integration))

(use-package evil-escape
  :after evil
  :init
  (setq-default evil-escape-key-sequence "jk")
  :config
  (evil-escape-mode))

(use-package evil-goggles
  :config
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces))

(use-package evil-nerd-commenter
  :bind (:map evil-normal-state-map
         ("gc" . evilnc-comment-operator)
         :map evil-visual-state-map
         ("gc" . evilnc-comment-operator)
         :map evil-inner-text-objects-map
         ("c" . evilnc-inner-commenter)
         :map evil-outer-text-objects-map
         ("c" . evilnc-outer-commenter)))

(use-package evil-org
  :after org
  :hook (org-mode . evil-org-mode)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(use-package evil-surround
  :config
  (global-evil-surround-mode 1))

(use-package evil-tutor)

(elpaca-wait)
#+end_src

** General keybindigs
#+begin_src emacs-lisp
(defun my/evil-record-macro ()
  (interactive)
  (if buffer-read-only
      (quit-window)
    (call-interactively 'evil-record-macro)))

(use-package general
  :config
  (general-evil-setup)

  (defvar my-escape-hook nil "Hook triggered by pressing the <escape> key.")
  (defun my/escape (&optional interactive)
    "Run `my-escape-hook'."
    (interactive (list 'interactive))
    (let ((inhibit-quit t))
      (cond ((minibuffer-window-active-p (minibuffer-window))
             ;; quit the minibuffer if open.
             (when interactive
               (setq this-command 'abort-recursive-edit))
             (abort-recursive-edit))
            ;; Run all escape hooks. If any returns non-nil, then stop there.
            ((run-hook-with-args-until-success 'my-escape-hook))
            ;; don't abort macros
            ((or defining-kbd-macro executing-kbd-macro) nil)
            ;; Back to the default
            ((unwind-protect (keyboard-quit)
               (when interactive
                 (setq this-command 'keyboard-quit)))))))

  (global-set-key [remap keyboard-quit] #'my/escape)

  (defun +evil-escape-a (&rest _)
    (when (called-interactively-p 'any)
      (call-interactively #'my/escape)))
  (advice-add #'evil-force-normal-state :after #'+evil-escape-a)
  (general-define-key "<escape>" 'my/escape)

  (general-define-key :states 'normal "q" 'my/evil-record-macro)
  (general-define-key :states 'motion "RET" 'hkey-either)

  (general-define-key :states 'normal "k" 'evil-previous-visual-line)
  (general-define-key :states 'normal "j" 'evil-next-visual-line)

  (general-define-key :keymaps 'override "M-h" 'evil-window-left)
  (general-define-key :keymaps 'override "M-j" 'evil-window-down)
  (general-define-key :keymaps 'override "M-k" 'evil-window-up)
  (general-define-key :keymaps 'override "M-l" 'evil-window-right)

  ;; set up 'SPC' as the global leader key
  (general-create-definer my/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (my/leader-keys
    "." '(find-file :wk "Find file")
    "f" '(:ignore t :wk "file")
    "f c" '((lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory))) :wk "Edit emacs config")
    "f s" '(save-buffer :wk "Save file")
    "TAB TAB" '(comment-line :wk "Comment lines"))

  (my/leader-keys
    "b" '(:ignore t :wk "buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer"))

  (my/leader-keys
    "e" '(:ignore t :wk "evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")) 

  (my/leader-keys
    "h" '(:ignore t :wk "help")
    "h f" '(helpful-callable :wk "Describle function")
    "h v" '(helpful-variable :wk "Describe variable")
    "h k" '(helpful-key :wk "Describe key")
    "h x" '(helpful-command :wk "Describe command")
    ;;"h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
    "h r r" '(reload-init-file :wk "Reload emacs config"))

  (my/leader-keys
    "t" '(:ignore t :wk "toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines"))

  (my/leader-keys
    "w" '(:ignore t :wk "windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
)
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* BUFFER-MOVE
Creating some functions to allow us to easily move windows (splits) around.  The following block of code was taken from buffer-move.el found on the EmacsWiki:
https://www.emacswiki.org/emacs/buffer-move.el

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* CENTERED TEXT
+ [[https://github.com/rnkn/olivetti][Olivetti]] centers the text in the window

#+begin_src emacs-lisp
(use-package olivetti
  :config
  (setq-default olivetti-body-width 85)
  (my/leader-keys
    "t z" '(olivetti-mode :wk "Toggle centered text mode")))
#+end_src

* CHEZMOI
[[https://github.com/tuh8888/chezmoi.el][Chezmoi.el]] provides integration with the [[https://www.chezmoi.io/][Chezmoi]] config manager

(Temporarily disabled, =:tangle no=)

#+begin_src emacs-lisp :tangle no
(use-package chezmoi
  :config
  (my/leader-keys
    "f c" '((lambda () (interactive) (chezmoi-find (expand-file-name "config.org" user-emacs-directory))) :wk "Find Emacs config file")
    "f C" '(:ignore t :wk "chezmoi")
    "f C f" '(chezmoi-find :wk "Chezmoi find file")
    "f C s" '(chezmoi-write :wk "Chezmoi write file")))
#+end_src

* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
(use-package company
  :after (lsp-mode yasnippet)
  :diminish
  :bind (:map prog-mode-map
         ("<tab>" . company-indent-or-complete-common)
         :map org-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode 1))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* DASHBOARD (SPLASH SCREEN)
+ [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]] provides a better splash screen for Emacs

#+begin_src emacs-lisp
(use-package dashboard
  :elpaca t
  :config
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))
#+end_src

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode)
  :config
  (setq flycheck-indication-mode 'right-fringe)
  ;; Left-pointing arrow
  (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
    [16 48 112 240 112 48 16] nil nil 'center))

(use-package flycheck-posframe
  :after flycheck
  :diminish
  :hook (flycheck-mode . flycheck-posframe-mode))
#+end_src

* FONTS
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrainsMono Nerd Font"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Roboto"
  :height 130
  :weight 'light)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrainsMono Nerd Font"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font-11"))
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
;(global-visual-line-mode 1)
(setq-default truncate-lines t)
#+end_src

* HELPFUL
Helpful provides a better help window.

#+begin_src emacs-lisp
(use-package helpful
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)
         ("C-h x" . helpful-command)))
#+end_src

* HYPERBOLE
Manages links. Use RET to follow links.

#+begin_src emacs-lisp
(use-package hyperbole
  :diminish
  :config
  (hyperbole-mode 1))
#+end_src

* LANGUAGE SUPPORT (LSP)
LSP support for Emacs.

#+begin_src emacs-lisp
(defun my/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :config
  (lsp-enable-which-key-integration t)
  (add-hook 'lsp-mode-hook 'my/lsp-mode-setup))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode))

(use-package consult-lsp
  :after (lsp-mode consult)
  :config
  (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols))
#+end_src

** Typescript
Support for Javascript/Typescript.

#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))

(use-package rjsx-mode
  :mode "\\.[mc]?js\\'"
  :mode "\\.es6\\'"
  :mode "\\.pac\\'"
  :config
  (setq js-chain-indent t
        js2-basic-offset 2
        js2-skip-preprocessor-directives t
        js2-mode-show-parse-errors nil
        js2-mode-show-strict-warnings nil
        js2-strict-missing-semi-warning nil
        js2-highlight-level 3
        js2-idle-timer-delay 0.15)

  (defun my/js-offset ()
    js-switch-indent-offset js2-basic-offset)
  (add-hook 'rjsx-mode-hook 'my/js-offset))

(use-package xref-js2
  :after rjsx-mode
  :init
  (setq xref-js2-search-program 'rg))
#+end_src

* MAGIT
[[https://magit.vc/][Magit]] provides a git client.

#+begin_src emacs-lisp
(use-package magit
  :config
  (general-define-key
   :keymaps 'magit-status-mode-map
   "k" #'magit-section-backward
   "j" #'magit-section-forward
   "C-k" #'magit-delete-thing
   "C-j" #'magit-status-jump))

(use-package diff-hl
  :after magit
  :config
  ;; --- Appearance ---
  (setq-default fringes-outside-margins t)
  (defun +diff-hl-define-thin-bitmaps-a (&rest args)
    (define-fringe-bitmap 'diff-hl-bmp-middle [224] nil nil '(center repeated))
    (define-fringe-bitmap 'diff-hl-bmp-delete [240 224 192 128] nil nil 'top))
  (advice-add #'diff-hl-define-bitmaps :override #'+diff-hl-define-thin-bitmaps-a)
  (defun +diff-hl-type-face-fn (type _pos)
    (intern (format "diff-hl-%s" type)))
  (defun +diff-hl-type-at-pos-fn (type _pos)
    (if (eq type 'delete)
        'diff-hl-bmp-delete
      'diff-hl-bmp-middle))
  (advice-add #'diff-hl-fringe-bmp-from-pos  :override #'+diff-hl-type-at-pos-fn)
  (advice-add #'diff-hl-fringe-bmp-from-type :override #'+diff-hl-type-at-pos-fn)
  (setq diff-hl-draw-borders nil)
  (defun +diff-hl-fix-faces-h ()
    (set-face-background 'diff-hl-insert nil)
    (set-face-background 'diff-hl-delete nil)
    (set-face-background 'diff-hl-change nil))
  (add-hook 'diff-hl-mode-hook '+diff-hl-fix-faces-h)

  ;; --- Functionality ---
  (add-hook 'find-file-hook 'diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'diff-hl-dir-mode)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'diff-hl-mode-hook 'diff-hl-flydiff-mode)

  (setq vc-git-diff-switches        '("--histogram")
        diff-hl-flydiff-delay       0.5
        diff-hl-show-staged-changes nil)

  (defun +diff-hl-update-h (&rest _)
    (ignore (or inhibit-redisplay
                (and (or (bound-and-true-p diff-hl-mode)
                         (bound-and-true-p diff-hl-dir-mode))
                     (diff-hl-update-once)))))

  (add-hook 'my-escape-hook #'+diff-hl-update-h t)
  (add-hook 'window-selection-change-functions #'+diff-hl-update-h)

  (add-hook 'magit-pre-refresh-hook  #'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)

  (defun +diff-hl-init-flydiff-mode-h ()
    (if (not diff-hl-flydiff-mode)
        (remove-hook 'evil-insert-state-exit-hook #'diff-hl-flydiff-update)
      (add-hook 'evil-insert-state-exit-hook #'diff-hl-flydiff-update)))
  (add-hook 'diff-hl-flydiff-mode-hook #'+diff-hl-init-flydiff-mode-h)

  (defun +diff-hl-fix-cursor-jump (fn &rest args)
    (let ((pt (point)))
      (prog1 (apply fn args)
        (goto-char pt))))
  (advice-add #'diff-hl-revert-hunk :around #'+diff-hl-fix-cursor-jump))
#+end_src

* MODELINE
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+end_src

* VERTICO (AND CONSULT)
+ Vertico, provides a performant and minimalistic vertical completion UI based on the default completion system.
+ Nerd Icons Completion, provides nerd icons for completion.
+ Orderless, provides an orderless completion style that divides the pattern into space-separated components.
+ Marginalia, provides rich annotations (descriptions) alongside the commands in =M-x=.
+ Consult, provides search and navigation commands based on the Emacs completion function completing-read.
+ Embark, provides minibuffer actions.

#+begin_src emacs-lisp
(use-package vertico
  :bind
  (:map vertico-map
   ("C-j" . vertico-next)
   ("C-M-j" . vertico-next-group)
   ("C-k" . vertico-previous)
   ("C-M-k" . vetico-previous-group))
  :init
  (vertico-mode)
  (setq vertico-cycle t)
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  (setq enable-recursive-minibuffers t))

;; Persist history over Emacs restarts.
(use-package savehist
  :elpaca nil
  :init
  (savehist-mode))

(use-package nerd-icons-completion
  :after marginalia
  :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
  :config
  (nerd-icons-completion-mode))

(use-package orderless
  :config
  (defun +vertico-orderless-dispatch (pattern _index _total)
    (cond
     ;; Ensure $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" pattern)
      `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
     ;; Ignore single !
     ((string= "!" pattern) `(orderless-literal . ""))
     ;; Without literal
     ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
     ;; Character folding
     ((string-prefix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 1)))
     ((string-suffix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 0 -1)))
     ;; Initialism matching
     ((string-prefix-p "`" pattern) `(orderless-initialism . ,(substring pattern 1)))
     ((string-suffix-p "`" pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
     ;; Literal matching
     ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
     ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
     ;; Flex matching
     ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
     ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1)))))
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles orderless partial-completion)))
        completion-style-dispatchers '(+vertico-orderless-dispatch)
        completion-component-separator #'orderless-escapable-split-on-space))

(use-package marginalia
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))

(use-package consult
  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))

(use-package embark
  :bind
  (("C-." . embark-act)
   ("C-;" . embark-dwim)
   ("C-h B" . embark-bindings))
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* ORG MODE
#+begin_src emacs-lisp
(use-package org
  :elpaca nil
  :init
  (setq org-directory "~/Documentos/org/"
        org-return-follows-link t))
#+end_src

** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Eye Candy
Org-superstar gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode))
  :init
  (setq org-hide-leading-stars t
        org-superstar-cycle-headline-bullets t
        org-superstar-special-todo-items nil)
#+end_src

Little tweaks to make org mode look better (most were taken from [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][this]] post):

#+begin_src emacs-lisp
;; Makes headings create a nice indentation
(add-hook 'org-mode-hook 'org-indent-mode)
;; Wrap lines that are too big
(add-hook 'org-mode-hook 'visual-line-mode)
;; Makes org-mode files have variable pitch font
(add-hook 'org-mode-hook 'variable-pitch-mode)

;; Disable padding of tags in headings
(setq org-tags-column 0)
;; Hide emphasis markup (//, **, __, etc.)
(setq org-hide-emphasis-markers t)

(let* ((headline `(:inherit default :weight bold)))
  (custom-theme-set-faces
   'user
   `(org-document-title ((t (,@headline :height 2.0 :underline nil))))
   `(org-level-1 ((t (,@headline :height 1.75))))
   `(org-level-2 ((t (,@headline :height 1.5))))
   `(org-level-3 ((t (,@headline :height 1.25))))
   `(org-level-4 ((t (,@headline :height 1.1))))
   `(org-level-5 ((t (,@headline))))
   `(org-level-6 ((t (,@headline))))
   `(org-level-7 ((t (,@headline))))
   `(org-level-8 ((t (,@headline))))))

(custom-theme-set-faces
 'user
 '(org-block ((t (:inherit fixed-pitch))))
 '(org-code ((t (:inherit (shadow fixed-pitch)))))
 ;; '(org-document-info ((t (:foreground "dark orange"))))
 '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
 '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
 ;; '(org-link ((t (:foreground "royal blue" :underline t))))
 '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-property-value ((t (:inherit fixed-pitch))) t)
 '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
 '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
 '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

** Fix indentation annoyances
Org mode source blocks have some really weird and annoying default indentation behavior.  I think this has to do with electric-indent-mode, which is turned on by default in Emacs.  So let's turn it OFF!

#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq-default org-src-preserve-indentation t)
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' ‚Ä¶ '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' ‚Ä¶ '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' ‚Ä¶ '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' ‚Ä¶ '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' ‚Ä¶ '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' ‚Ä¶ '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' ‚Ä¶ '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' ‚Ä¶ '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' ‚Ä¶ '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' ‚Ä¶ '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

** Org queries
#+begin_src emacs-lisp
(use-package org-ql)
#+end_src

** Org Roam
#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t
        org-roam-directory "~/Documentos/org/school/"
        org-roam-completion-everywhere t
        org-roam-dailies-capture-templates
          '(("d" "default" entry "* %?"
             :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))
#+end_src

* RAINBOW DELIMITERS
Make nested parentesis have a diferent color.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :diminish
  :hook ((org-mode prog-mode) . rainbow-delimiters-mode))
#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook ((org-mode prog-mode) . rainbow-mode))
#+end_src

* RELOAD EMACS
For some reason, loading the init file once doesn't work somethimes. So this is kind of a hack.

#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* SHELLS AND TERMINALS
In my configs, all of my shells (bash, fish, zsh and the ESHELL) require my shell-color-scripts-git package to be installed.  On Arch Linux, you can install it from the AUR.  Otherwise, go to my shell-color-scripts repository on GitLab to get it.

** Eshell
Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.
  
(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
(use-package vterm
:config
(setq vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

* SMART PARENS
#+begin_src emacs-lisp
(use-package smartparens
  :hook ((prog-mode text-mode markdown-mode) . smartparens-mode)
  :config
  (require 'smartparens-config))

(use-package evil-smartparens
  :after smartparens
  :hook (smartparens-enabled . evil-smartparens-mode))
#+end_src

* SNIPPETS
+ YASnippet provides a template system for Emacs.
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1))

(use-package yasnippet-snippets
  :after yasnippet)
#+end_src

* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (my/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* THEME
#+begin_src emacs-lisp
(use-package catppuccin-theme
  :config
  (load-theme 'catppuccin :no-confirm)
  (defun catppuccin-toggle-light ()
    (interactive)
    (if (eq catppuccin-flavor 'latte)
        (setq catppuccin-flavor 'mocha)
      (setq catppuccin-flavor 'latte))
    (catppuccin-reload))
  (my/leader-keys
    "t c" '(catppuccin-toggle-light :wk "Toggle light mode")))
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
  which-key-sort-order #'which-key-key-order-alpha
  which-key-sort-uppercase-first nil
  which-key-add-column-padding 1
  which-key-max-display-columns nil
  which-key-min-display-lines 6
  which-key-side-window-slot -10
  which-key-side-window-max-height 0.25
  which-key-idle-delay 0.8
  which-key-max-description-length 25
  which-key-allow-imprecise-window-fit t
  which-key-separator " ‚Üí " ))
#+end_src
